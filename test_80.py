#!/usr/bin/env python3
# -*- coding:utf-8 -*-

#海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。
# 第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，
# 问海滩上原来最少有多少个桃子？
'''
如果多给4个桃子,则5只猴子每次都恰好可以均分且没有剩余
设多给4个后共有A个桃.
第一只取走后剩下：A×4/5；
第二只取走后剩下：A×4/5×4/5；
第三只取走后剩下：A×4/5×4/5×4/5；
第四只取走后剩下：A×4/5×4/5×4/5×4/5：
第五只取走后剩下：A×4/5×4/5×4/5×4/5×4/5＝A×1024/3125
因为A×1024/3125一定是整数,所以A最少是3125
所以原来的桃子最少有：
3125－4＝3121(个)
到第五只猴子时,这堆桃子还剩1280个
'''


# 猴子分桃，最少问题分析：问最少有多少只桃子，则岸上最后剩的桃子数目越小，则原岸上的桃子越少
# 假设最后岸上还剩4x只桃子,可以利用递归方法求解
#
# num = int(input("输入猴子的数目:"))
# def fn(n):
# 	if n == num:
# 		return (4 * x)  # 最后剩的桃子的数目
# 	else:
# 		return (fn(n + 1) * 5 / 4 + 1)  # 每组剩下的总数
#
# x = 1   #假设最后每份只剩一个桃子
# while 1:
# 	count = 0
# 	for i in range(1, num):
# 		if fn(i) % 4 == 0:
# 			count = count + 1
# 	if count == num - 1:
# 		print("海滩上原来最少有%d个桃子" % int(fn(0)))
# 		break
# 	else:
# 		x = x + 1