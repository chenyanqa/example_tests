#!/usr/bin/env python
# -*- coding:utf-8 -*-

#猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，
# 又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。
'''
1，目前我找到的对递归最恰当的比喻，就是查词典。我们使用的词典，本身就是递归，为了解释一个词，需要使用更多的词。
当你查一个词，发现这个词的解释中某个词仍然不懂，于是你开始查这第二个词，可惜，第二个词里仍然有不懂的词，于是查第三个词，
这样查下去，直到有一个词的解释是你完全能看懂的，那么递归走到了尽头，然后你开始后退，逐个明白之前查过的每一个词，最终，
你明白了最开始那个词的意思。。。

2，递归（英语：Recursion），又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。
3、递归的基本思想是把规模大的问题转化为规模小的相似的子问题来解决。在函数实现时，因为解决大问题的方法和
解决小问题的方法往往是同一个方法，所以就产生了函数调用它自身的情况。
4、当函数直接或者间接调用自己时，则发生了递归
'''

#逆向递推
list = []
n10 = 1  #第10天剩下一个苹果
for i in range(9,0,-1):  #倒序 从第9天开始算  每天剩下的苹果
	ni = 2*(n10+1) #当i取9时，n9= 2*(n10+1)， 当i取8 时，n8= 2*(n9+1)
	n10 = ni  #每次循环时 将n10 重新赋值 例如n8= 2*(n10+1)，但是将此时表达式里面的n10赋值为n9即可
	list.append(ni)

print(list)

# #方法2：利用递归函数的思路，在定义taozi（n）函数的时候，直接调用当前定义的函数，去求n-1的情况，并将n 和n-1建议一种联系即可
# def taozi(n):
# 	if n ==1:
# 		return 1
# 	else:
# 		return 2*(taozi(n-1)+1)  #在定义函数的过程中，发生了当前函数的调用，并建立联系
# print(taozi(10))

